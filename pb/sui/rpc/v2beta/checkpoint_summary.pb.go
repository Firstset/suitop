// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: sui/rpc/v2beta/checkpoint_summary.proto

package v2beta

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckpointCommitment_CheckpointCommitmentKind int32

const (
	CheckpointCommitment_CHECKPOINT_COMMITMENT_KIND_UNKNOWN CheckpointCommitment_CheckpointCommitmentKind = 0
	// An elliptic curve multiset hash attesting to the set of objects that
	// comprise the live state of the Sui blockchain.
	CheckpointCommitment_ECMH_LIVE_OBJECT_SET CheckpointCommitment_CheckpointCommitmentKind = 1
)

// Enum value maps for CheckpointCommitment_CheckpointCommitmentKind.
var (
	CheckpointCommitment_CheckpointCommitmentKind_name = map[int32]string{
		0: "CHECKPOINT_COMMITMENT_KIND_UNKNOWN",
		1: "ECMH_LIVE_OBJECT_SET",
	}
	CheckpointCommitment_CheckpointCommitmentKind_value = map[string]int32{
		"CHECKPOINT_COMMITMENT_KIND_UNKNOWN": 0,
		"ECMH_LIVE_OBJECT_SET":               1,
	}
)

func (x CheckpointCommitment_CheckpointCommitmentKind) Enum() *CheckpointCommitment_CheckpointCommitmentKind {
	p := new(CheckpointCommitment_CheckpointCommitmentKind)
	*p = x
	return p
}

func (x CheckpointCommitment_CheckpointCommitmentKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckpointCommitment_CheckpointCommitmentKind) Descriptor() protoreflect.EnumDescriptor {
	return file_sui_rpc_v2beta_checkpoint_summary_proto_enumTypes[0].Descriptor()
}

func (CheckpointCommitment_CheckpointCommitmentKind) Type() protoreflect.EnumType {
	return &file_sui_rpc_v2beta_checkpoint_summary_proto_enumTypes[0]
}

func (x CheckpointCommitment_CheckpointCommitmentKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckpointCommitment_CheckpointCommitmentKind.Descriptor instead.
func (CheckpointCommitment_CheckpointCommitmentKind) EnumDescriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_checkpoint_summary_proto_rawDescGZIP(), []int{2, 0}
}

// A header for a checkpoint on the Sui blockchain.
//
// On the Sui network, checkpoints define the history of the blockchain. They are quite similar to
// the concept of blocks used by other blockchains like Bitcoin or Ethereum. The Sui blockchain,
// however, forms checkpoints after transaction execution has already happened to provide a
// certified history of the chain, instead of being formed before execution.
//
// Checkpoints commit to a variety of state, including but not limited to:
//   - The hash of the previous checkpoint.
//   - The set of transaction digests, their corresponding effects digests, as well as the set of
//     user signatures that authorized its execution.
//   - The objects produced by a transaction.
//   - The set of live objects that make up the current state of the chain.
//   - On epoch transitions, the next validator committee.
//
// `CheckpointSummary`s themselves don't directly include all of the previous information but they
// are the top-level type by which all the information is committed to transitively via cryptographic
// hashes included in the summary. `CheckpointSummary`s are signed and certified by a quorum of
// the validator committee in a given epoch to allow verification of the chain's state.
type CheckpointSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This CheckpointSummary serialized as BCS.
	Bcs *Bcs `protobuf:"bytes,1,opt,name=bcs,proto3,oneof" json:"bcs,omitempty"`
	// The digest of this CheckpointSummary.
	Digest *string `protobuf:"bytes,2,opt,name=digest,proto3,oneof" json:"digest,omitempty"`
	// Epoch that this checkpoint belongs to.
	Epoch *uint64 `protobuf:"varint,3,opt,name=epoch,proto3,oneof" json:"epoch,omitempty"`
	// The height of this checkpoint.
	SequenceNumber *uint64 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3,oneof" json:"sequence_number,omitempty"`
	// Total number of transactions committed since genesis, including those in this
	// checkpoint.
	TotalNetworkTransactions *uint64 `protobuf:"varint,5,opt,name=total_network_transactions,json=totalNetworkTransactions,proto3,oneof" json:"total_network_transactions,omitempty"`
	// The hash of the `CheckpointContents` for this checkpoint.
	ContentDigest *string `protobuf:"bytes,6,opt,name=content_digest,json=contentDigest,proto3,oneof" json:"content_digest,omitempty"`
	// The hash of the previous `CheckpointSummary`.
	//
	// This will be `None` only for the first, or genesis, checkpoint.
	PreviousDigest *string `protobuf:"bytes,7,opt,name=previous_digest,json=previousDigest,proto3,oneof" json:"previous_digest,omitempty"`
	// The running total gas costs of all transactions included in the current epoch so far
	// until this checkpoint.
	EpochRollingGasCostSummary *GasCostSummary `protobuf:"bytes,8,opt,name=epoch_rolling_gas_cost_summary,json=epochRollingGasCostSummary,proto3,oneof" json:"epoch_rolling_gas_cost_summary,omitempty"`
	// Timestamp of the checkpoint - number of milliseconds from the Unix epoch
	// Checkpoint timestamps are monotonic, but not strongly monotonic - subsequent
	// checkpoints can have the same timestamp if they originate from the same underlining consensus commit.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Commitments to checkpoint-specific state.
	Commitments []*CheckpointCommitment `protobuf:"bytes,10,rep,name=commitments,proto3" json:"commitments,omitempty"`
	// Extra data only present in the final checkpoint of an epoch.
	EndOfEpochData *EndOfEpochData `protobuf:"bytes,11,opt,name=end_of_epoch_data,json=endOfEpochData,proto3,oneof" json:"end_of_epoch_data,omitempty"`
	// `CheckpointSummary` is not an evolvable structure - it must be readable by any version of
	// the code. Therefore, to allow extensions to be added to `CheckpointSummary`,
	// opaque data can be added to checkpoints, which can be deserialized based on the current
	// protocol version.
	VersionSpecificData []byte `protobuf:"bytes,12,opt,name=version_specific_data,json=versionSpecificData,proto3,oneof" json:"version_specific_data,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CheckpointSummary) Reset() {
	*x = CheckpointSummary{}
	mi := &file_sui_rpc_v2beta_checkpoint_summary_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckpointSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointSummary) ProtoMessage() {}

func (x *CheckpointSummary) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2beta_checkpoint_summary_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointSummary.ProtoReflect.Descriptor instead.
func (*CheckpointSummary) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_checkpoint_summary_proto_rawDescGZIP(), []int{0}
}

func (x *CheckpointSummary) GetBcs() *Bcs {
	if x != nil {
		return x.Bcs
	}
	return nil
}

func (x *CheckpointSummary) GetDigest() string {
	if x != nil && x.Digest != nil {
		return *x.Digest
	}
	return ""
}

func (x *CheckpointSummary) GetEpoch() uint64 {
	if x != nil && x.Epoch != nil {
		return *x.Epoch
	}
	return 0
}

func (x *CheckpointSummary) GetSequenceNumber() uint64 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *CheckpointSummary) GetTotalNetworkTransactions() uint64 {
	if x != nil && x.TotalNetworkTransactions != nil {
		return *x.TotalNetworkTransactions
	}
	return 0
}

func (x *CheckpointSummary) GetContentDigest() string {
	if x != nil && x.ContentDigest != nil {
		return *x.ContentDigest
	}
	return ""
}

func (x *CheckpointSummary) GetPreviousDigest() string {
	if x != nil && x.PreviousDigest != nil {
		return *x.PreviousDigest
	}
	return ""
}

func (x *CheckpointSummary) GetEpochRollingGasCostSummary() *GasCostSummary {
	if x != nil {
		return x.EpochRollingGasCostSummary
	}
	return nil
}

func (x *CheckpointSummary) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CheckpointSummary) GetCommitments() []*CheckpointCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *CheckpointSummary) GetEndOfEpochData() *EndOfEpochData {
	if x != nil {
		return x.EndOfEpochData
	}
	return nil
}

func (x *CheckpointSummary) GetVersionSpecificData() []byte {
	if x != nil {
		return x.VersionSpecificData
	}
	return nil
}

// Data, which when included in a `CheckpointSummary`, signals the end of an `Epoch`.
type EndOfEpochData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The set of validators that will be in the `ValidatorCommittee` for the next epoch.
	NextEpochCommittee []*ValidatorCommitteeMember `protobuf:"bytes,1,rep,name=next_epoch_committee,json=nextEpochCommittee,proto3" json:"next_epoch_committee,omitempty"`
	// The protocol version that is in effect during the next epoch.
	NextEpochProtocolVersion *uint64 `protobuf:"varint,2,opt,name=next_epoch_protocol_version,json=nextEpochProtocolVersion,proto3,oneof" json:"next_epoch_protocol_version,omitempty"`
	// Commitments to epoch specific state (live object set)
	EpochCommitments []*CheckpointCommitment `protobuf:"bytes,3,rep,name=epoch_commitments,json=epochCommitments,proto3" json:"epoch_commitments,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EndOfEpochData) Reset() {
	*x = EndOfEpochData{}
	mi := &file_sui_rpc_v2beta_checkpoint_summary_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndOfEpochData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndOfEpochData) ProtoMessage() {}

func (x *EndOfEpochData) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2beta_checkpoint_summary_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndOfEpochData.ProtoReflect.Descriptor instead.
func (*EndOfEpochData) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_checkpoint_summary_proto_rawDescGZIP(), []int{1}
}

func (x *EndOfEpochData) GetNextEpochCommittee() []*ValidatorCommitteeMember {
	if x != nil {
		return x.NextEpochCommittee
	}
	return nil
}

func (x *EndOfEpochData) GetNextEpochProtocolVersion() uint64 {
	if x != nil && x.NextEpochProtocolVersion != nil {
		return *x.NextEpochProtocolVersion
	}
	return 0
}

func (x *EndOfEpochData) GetEpochCommitments() []*CheckpointCommitment {
	if x != nil {
		return x.EpochCommitments
	}
	return nil
}

// A commitment made by a checkpoint.
type CheckpointCommitment struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Kind          *CheckpointCommitment_CheckpointCommitmentKind `protobuf:"varint,1,opt,name=kind,proto3,enum=sui.rpc.v2beta.CheckpointCommitment_CheckpointCommitmentKind,oneof" json:"kind,omitempty"`
	Digest        *string                                        `protobuf:"bytes,2,opt,name=digest,proto3,oneof" json:"digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckpointCommitment) Reset() {
	*x = CheckpointCommitment{}
	mi := &file_sui_rpc_v2beta_checkpoint_summary_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckpointCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointCommitment) ProtoMessage() {}

func (x *CheckpointCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2beta_checkpoint_summary_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointCommitment.ProtoReflect.Descriptor instead.
func (*CheckpointCommitment) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_checkpoint_summary_proto_rawDescGZIP(), []int{2}
}

func (x *CheckpointCommitment) GetKind() CheckpointCommitment_CheckpointCommitmentKind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return CheckpointCommitment_CHECKPOINT_COMMITMENT_KIND_UNKNOWN
}

func (x *CheckpointCommitment) GetDigest() string {
	if x != nil && x.Digest != nil {
		return *x.Digest
	}
	return ""
}

var File_sui_rpc_v2beta_checkpoint_summary_proto protoreflect.FileDescriptor

const file_sui_rpc_v2beta_checkpoint_summary_proto_rawDesc = "" +
	"\n" +
	"'sui/rpc/v2beta/checkpoint_summary.proto\x12\x0esui.rpc.v2beta\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x18sui/rpc/v2beta/bcs.proto\x1a%sui/rpc/v2beta/gas_cost_summary.proto\x1a\x1esui/rpc/v2beta/signature.proto\"\x93\a\n" +
	"\x11CheckpointSummary\x12*\n" +
	"\x03bcs\x18\x01 \x01(\v2\x13.sui.rpc.v2beta.BcsH\x00R\x03bcs\x88\x01\x01\x12\x1b\n" +
	"\x06digest\x18\x02 \x01(\tH\x01R\x06digest\x88\x01\x01\x12\x19\n" +
	"\x05epoch\x18\x03 \x01(\x04H\x02R\x05epoch\x88\x01\x01\x12,\n" +
	"\x0fsequence_number\x18\x04 \x01(\x04H\x03R\x0esequenceNumber\x88\x01\x01\x12A\n" +
	"\x1atotal_network_transactions\x18\x05 \x01(\x04H\x04R\x18totalNetworkTransactions\x88\x01\x01\x12*\n" +
	"\x0econtent_digest\x18\x06 \x01(\tH\x05R\rcontentDigest\x88\x01\x01\x12,\n" +
	"\x0fprevious_digest\x18\a \x01(\tH\x06R\x0epreviousDigest\x88\x01\x01\x12g\n" +
	"\x1eepoch_rolling_gas_cost_summary\x18\b \x01(\v2\x1e.sui.rpc.v2beta.GasCostSummaryH\aR\x1aepochRollingGasCostSummary\x88\x01\x01\x12=\n" +
	"\ttimestamp\x18\t \x01(\v2\x1a.google.protobuf.TimestampH\bR\ttimestamp\x88\x01\x01\x12F\n" +
	"\vcommitments\x18\n" +
	" \x03(\v2$.sui.rpc.v2beta.CheckpointCommitmentR\vcommitments\x12N\n" +
	"\x11end_of_epoch_data\x18\v \x01(\v2\x1e.sui.rpc.v2beta.EndOfEpochDataH\tR\x0eendOfEpochData\x88\x01\x01\x127\n" +
	"\x15version_specific_data\x18\f \x01(\fH\n" +
	"R\x13versionSpecificData\x88\x01\x01B\x06\n" +
	"\x04_bcsB\t\n" +
	"\a_digestB\b\n" +
	"\x06_epochB\x12\n" +
	"\x10_sequence_numberB\x1d\n" +
	"\x1b_total_network_transactionsB\x11\n" +
	"\x0f_content_digestB\x12\n" +
	"\x10_previous_digestB!\n" +
	"\x1f_epoch_rolling_gas_cost_summaryB\f\n" +
	"\n" +
	"_timestampB\x14\n" +
	"\x12_end_of_epoch_dataB\x18\n" +
	"\x16_version_specific_data\"\xa3\x02\n" +
	"\x0eEndOfEpochData\x12Z\n" +
	"\x14next_epoch_committee\x18\x01 \x03(\v2(.sui.rpc.v2beta.ValidatorCommitteeMemberR\x12nextEpochCommittee\x12B\n" +
	"\x1bnext_epoch_protocol_version\x18\x02 \x01(\x04H\x00R\x18nextEpochProtocolVersion\x88\x01\x01\x12Q\n" +
	"\x11epoch_commitments\x18\x03 \x03(\v2$.sui.rpc.v2beta.CheckpointCommitmentR\x10epochCommitmentsB\x1e\n" +
	"\x1c_next_epoch_protocol_version\"\xfd\x01\n" +
	"\x14CheckpointCommitment\x12V\n" +
	"\x04kind\x18\x01 \x01(\x0e2=.sui.rpc.v2beta.CheckpointCommitment.CheckpointCommitmentKindH\x00R\x04kind\x88\x01\x01\x12\x1b\n" +
	"\x06digest\x18\x02 \x01(\tH\x01R\x06digest\x88\x01\x01\"\\\n" +
	"\x18CheckpointCommitmentKind\x12&\n" +
	"\"CHECKPOINT_COMMITMENT_KIND_UNKNOWN\x10\x00\x12\x18\n" +
	"\x14ECMH_LIVE_OBJECT_SET\x10\x01B\a\n" +
	"\x05_kindB\t\n" +
	"\a_digestB\x10Z\x0esui/rpc/v2betab\x06proto3"

var (
	file_sui_rpc_v2beta_checkpoint_summary_proto_rawDescOnce sync.Once
	file_sui_rpc_v2beta_checkpoint_summary_proto_rawDescData []byte
)

func file_sui_rpc_v2beta_checkpoint_summary_proto_rawDescGZIP() []byte {
	file_sui_rpc_v2beta_checkpoint_summary_proto_rawDescOnce.Do(func() {
		file_sui_rpc_v2beta_checkpoint_summary_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sui_rpc_v2beta_checkpoint_summary_proto_rawDesc), len(file_sui_rpc_v2beta_checkpoint_summary_proto_rawDesc)))
	})
	return file_sui_rpc_v2beta_checkpoint_summary_proto_rawDescData
}

var file_sui_rpc_v2beta_checkpoint_summary_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sui_rpc_v2beta_checkpoint_summary_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sui_rpc_v2beta_checkpoint_summary_proto_goTypes = []any{
	(CheckpointCommitment_CheckpointCommitmentKind)(0), // 0: sui.rpc.v2beta.CheckpointCommitment.CheckpointCommitmentKind
	(*CheckpointSummary)(nil),                          // 1: sui.rpc.v2beta.CheckpointSummary
	(*EndOfEpochData)(nil),                             // 2: sui.rpc.v2beta.EndOfEpochData
	(*CheckpointCommitment)(nil),                       // 3: sui.rpc.v2beta.CheckpointCommitment
	(*Bcs)(nil),                                        // 4: sui.rpc.v2beta.Bcs
	(*GasCostSummary)(nil),                             // 5: sui.rpc.v2beta.GasCostSummary
	(*timestamp.Timestamp)(nil),                        // 6: google.protobuf.Timestamp
	(*ValidatorCommitteeMember)(nil),                   // 7: sui.rpc.v2beta.ValidatorCommitteeMember
}
var file_sui_rpc_v2beta_checkpoint_summary_proto_depIdxs = []int32{
	4, // 0: sui.rpc.v2beta.CheckpointSummary.bcs:type_name -> sui.rpc.v2beta.Bcs
	5, // 1: sui.rpc.v2beta.CheckpointSummary.epoch_rolling_gas_cost_summary:type_name -> sui.rpc.v2beta.GasCostSummary
	6, // 2: sui.rpc.v2beta.CheckpointSummary.timestamp:type_name -> google.protobuf.Timestamp
	3, // 3: sui.rpc.v2beta.CheckpointSummary.commitments:type_name -> sui.rpc.v2beta.CheckpointCommitment
	2, // 4: sui.rpc.v2beta.CheckpointSummary.end_of_epoch_data:type_name -> sui.rpc.v2beta.EndOfEpochData
	7, // 5: sui.rpc.v2beta.EndOfEpochData.next_epoch_committee:type_name -> sui.rpc.v2beta.ValidatorCommitteeMember
	3, // 6: sui.rpc.v2beta.EndOfEpochData.epoch_commitments:type_name -> sui.rpc.v2beta.CheckpointCommitment
	0, // 7: sui.rpc.v2beta.CheckpointCommitment.kind:type_name -> sui.rpc.v2beta.CheckpointCommitment.CheckpointCommitmentKind
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_sui_rpc_v2beta_checkpoint_summary_proto_init() }
func file_sui_rpc_v2beta_checkpoint_summary_proto_init() {
	if File_sui_rpc_v2beta_checkpoint_summary_proto != nil {
		return
	}
	file_sui_rpc_v2beta_bcs_proto_init()
	file_sui_rpc_v2beta_gas_cost_summary_proto_init()
	file_sui_rpc_v2beta_signature_proto_init()
	file_sui_rpc_v2beta_checkpoint_summary_proto_msgTypes[0].OneofWrappers = []any{}
	file_sui_rpc_v2beta_checkpoint_summary_proto_msgTypes[1].OneofWrappers = []any{}
	file_sui_rpc_v2beta_checkpoint_summary_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sui_rpc_v2beta_checkpoint_summary_proto_rawDesc), len(file_sui_rpc_v2beta_checkpoint_summary_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sui_rpc_v2beta_checkpoint_summary_proto_goTypes,
		DependencyIndexes: file_sui_rpc_v2beta_checkpoint_summary_proto_depIdxs,
		EnumInfos:         file_sui_rpc_v2beta_checkpoint_summary_proto_enumTypes,
		MessageInfos:      file_sui_rpc_v2beta_checkpoint_summary_proto_msgTypes,
	}.Build()
	File_sui_rpc_v2beta_checkpoint_summary_proto = out.File
	file_sui_rpc_v2beta_checkpoint_summary_proto_goTypes = nil
	file_sui_rpc_v2beta_checkpoint_summary_proto_depIdxs = nil
}
