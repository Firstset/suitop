// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: sui/rpc/v2beta/execution_status.proto

package v2beta

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecutionError_ExecutionErrorKind int32

const (
	ExecutionError_EXECUTION_ERROR_KIND_UNKNOWN ExecutionError_ExecutionErrorKind = 0
	// Insufficient gas.
	ExecutionError_INSUFFICIENT_GAS ExecutionError_ExecutionErrorKind = 1
	// Invalid `Gas` object.
	ExecutionError_INVALID_GAS_OBJECT ExecutionError_ExecutionErrorKind = 2
	// Invariant violation.
	ExecutionError_INVARIANT_VIOLATION ExecutionError_ExecutionErrorKind = 3
	// Attempted to use feature that is not supported yet.
	ExecutionError_FEATURE_NOT_YET_SUPPORTED ExecutionError_ExecutionErrorKind = 4
	// Move object is larger than the maximum allowed size.
	ExecutionError_OBJECT_TOO_BIG ExecutionError_ExecutionErrorKind = 5
	// Package is larger than the maximum allowed size.
	ExecutionError_PACKAGE_TOO_BIG ExecutionError_ExecutionErrorKind = 6
	// Circular object ownership.
	ExecutionError_CIRCULAR_OBJECT_OWNERSHIP ExecutionError_ExecutionErrorKind = 7
	// Insufficient coin balance for requested operation.
	ExecutionError_INSUFFICIENT_COIN_BALANCE ExecutionError_ExecutionErrorKind = 8
	// Coin balance overflowed an u64.
	ExecutionError_COIN_BALANCE_OVERFLOW ExecutionError_ExecutionErrorKind = 9
	// Publish error, non-zero address.
	// The modules in the package must have their self-addresses set to zero.
	ExecutionError_PUBLISH_ERROR_NON_ZERO_ADDRESS ExecutionError_ExecutionErrorKind = 10
	// Sui Move bytecode verification error.
	ExecutionError_SUI_MOVE_VERIFICATION_ERROR ExecutionError_ExecutionErrorKind = 11
	// Error from a non-abort instruction.
	// Possible causes:
	//
	//	Arithmetic error, stack overflow, max value depth, or similar.
	ExecutionError_MOVE_PRIMITIVE_RUNTIME_ERROR ExecutionError_ExecutionErrorKind = 12
	// Move runtime abort.
	ExecutionError_MOVE_ABORT ExecutionError_ExecutionErrorKind = 13
	// Bytecode verification error.
	ExecutionError_VM_VERIFICATION_OR_DESERIALIZATION_ERROR ExecutionError_ExecutionErrorKind = 14
	// MoveVm invariant violation.
	ExecutionError_VM_INVARIANT_VIOLATION ExecutionError_ExecutionErrorKind = 15
	// Function not found.
	ExecutionError_FUNCTION_NOT_FOUND ExecutionError_ExecutionErrorKind = 16
	// Parity mismatch for Move function.
	// The number of arguments does not match the number of parameters.
	ExecutionError_ARITY_MISMATCH ExecutionError_ExecutionErrorKind = 17
	// Type parity mismatch for Move function.
	// Mismatch between the number of actual versus expected type arguments.
	ExecutionError_TYPE_ARITY_MISMATCH ExecutionError_ExecutionErrorKind = 18
	// Non-entry function invoked. Move Call must start with an entry function.
	ExecutionError_NON_ENTRY_FUNCTION_INVOKED ExecutionError_ExecutionErrorKind = 19
	// Invalid command argument.
	ExecutionError_COMMAND_ARGUMENT_ERROR ExecutionError_ExecutionErrorKind = 20
	// Type argument error.
	ExecutionError_TYPE_ARGUMENT_ERROR ExecutionError_ExecutionErrorKind = 21
	// Unused result without the drop ability.
	ExecutionError_UNUSED_VALUE_WITHOUT_DROP ExecutionError_ExecutionErrorKind = 22
	// Invalid public Move function signature.
	// Unsupported return type for return value.
	ExecutionError_INVALID_PUBLIC_FUNCTION_RETURN_TYPE ExecutionError_ExecutionErrorKind = 23
	// Invalid transfer object, object does not have public transfer.
	ExecutionError_INVALID_TRANSFER_OBJECT ExecutionError_ExecutionErrorKind = 24
	// Effects from the transaction are too large.
	ExecutionError_EFFECTS_TOO_LARGE ExecutionError_ExecutionErrorKind = 25
	// Publish or Upgrade is missing dependency.
	ExecutionError_PUBLISH_UPGRADE_MISSING_DEPENDENCY ExecutionError_ExecutionErrorKind = 26
	// Publish or upgrade dependency downgrade.
	//
	// Indirect (transitive) dependency of published or upgraded package has been assigned an
	// on-chain version that is less than the version required by one of the package's
	// transitive dependencies.
	ExecutionError_PUBLISH_UPGRADE_DEPENDENCY_DOWNGRADE ExecutionError_ExecutionErrorKind = 27
	// Invalid package upgrade.
	ExecutionError_PACKAGE_UPGRADE_ERROR ExecutionError_ExecutionErrorKind = 28
	// Indicates the transaction tried to write objects too large to storage.
	ExecutionError_WRITTEN_OBJECTS_TOO_LARGE ExecutionError_ExecutionErrorKind = 29
	// Certificate is on the deny list.
	ExecutionError_CERTIFICATE_DENIED ExecutionError_ExecutionErrorKind = 30
	// Sui Move bytecode verification timed out.
	ExecutionError_SUI_MOVE_VERIFICATION_TIMEDOUT ExecutionError_ExecutionErrorKind = 31
	// The requested shared object operation is not allowed.
	ExecutionError_SHARED_OBJECT_OPERATION_NOT_ALLOWED ExecutionError_ExecutionErrorKind = 32
	// Requested shared object has been deleted.
	ExecutionError_INPUT_OBJECT_DELETED ExecutionError_ExecutionErrorKind = 33
	// Certificate is canceled due to congestion on shared objects.
	ExecutionError_EXECUTION_CANCELED_DUE_TO_SHARED_OBJECT_CONGESTION ExecutionError_ExecutionErrorKind = 34
	// Address is denied for this coin type.
	ExecutionError_ADDRESS_DENIED_FOR_COIN ExecutionError_ExecutionErrorKind = 35
	// Coin type is globally paused for use.
	ExecutionError_COIN_TYPE_GLOBAL_PAUSE ExecutionError_ExecutionErrorKind = 36
	// Certificate is canceled because randomness could not be generated this epoch.
	ExecutionError_EXECUTION_CANCELED_DUE_TO_RANDOMNESS_UNAVAILABLE ExecutionError_ExecutionErrorKind = 37
)

// Enum value maps for ExecutionError_ExecutionErrorKind.
var (
	ExecutionError_ExecutionErrorKind_name = map[int32]string{
		0:  "EXECUTION_ERROR_KIND_UNKNOWN",
		1:  "INSUFFICIENT_GAS",
		2:  "INVALID_GAS_OBJECT",
		3:  "INVARIANT_VIOLATION",
		4:  "FEATURE_NOT_YET_SUPPORTED",
		5:  "OBJECT_TOO_BIG",
		6:  "PACKAGE_TOO_BIG",
		7:  "CIRCULAR_OBJECT_OWNERSHIP",
		8:  "INSUFFICIENT_COIN_BALANCE",
		9:  "COIN_BALANCE_OVERFLOW",
		10: "PUBLISH_ERROR_NON_ZERO_ADDRESS",
		11: "SUI_MOVE_VERIFICATION_ERROR",
		12: "MOVE_PRIMITIVE_RUNTIME_ERROR",
		13: "MOVE_ABORT",
		14: "VM_VERIFICATION_OR_DESERIALIZATION_ERROR",
		15: "VM_INVARIANT_VIOLATION",
		16: "FUNCTION_NOT_FOUND",
		17: "ARITY_MISMATCH",
		18: "TYPE_ARITY_MISMATCH",
		19: "NON_ENTRY_FUNCTION_INVOKED",
		20: "COMMAND_ARGUMENT_ERROR",
		21: "TYPE_ARGUMENT_ERROR",
		22: "UNUSED_VALUE_WITHOUT_DROP",
		23: "INVALID_PUBLIC_FUNCTION_RETURN_TYPE",
		24: "INVALID_TRANSFER_OBJECT",
		25: "EFFECTS_TOO_LARGE",
		26: "PUBLISH_UPGRADE_MISSING_DEPENDENCY",
		27: "PUBLISH_UPGRADE_DEPENDENCY_DOWNGRADE",
		28: "PACKAGE_UPGRADE_ERROR",
		29: "WRITTEN_OBJECTS_TOO_LARGE",
		30: "CERTIFICATE_DENIED",
		31: "SUI_MOVE_VERIFICATION_TIMEDOUT",
		32: "SHARED_OBJECT_OPERATION_NOT_ALLOWED",
		33: "INPUT_OBJECT_DELETED",
		34: "EXECUTION_CANCELED_DUE_TO_SHARED_OBJECT_CONGESTION",
		35: "ADDRESS_DENIED_FOR_COIN",
		36: "COIN_TYPE_GLOBAL_PAUSE",
		37: "EXECUTION_CANCELED_DUE_TO_RANDOMNESS_UNAVAILABLE",
	}
	ExecutionError_ExecutionErrorKind_value = map[string]int32{
		"EXECUTION_ERROR_KIND_UNKNOWN":                       0,
		"INSUFFICIENT_GAS":                                   1,
		"INVALID_GAS_OBJECT":                                 2,
		"INVARIANT_VIOLATION":                                3,
		"FEATURE_NOT_YET_SUPPORTED":                          4,
		"OBJECT_TOO_BIG":                                     5,
		"PACKAGE_TOO_BIG":                                    6,
		"CIRCULAR_OBJECT_OWNERSHIP":                          7,
		"INSUFFICIENT_COIN_BALANCE":                          8,
		"COIN_BALANCE_OVERFLOW":                              9,
		"PUBLISH_ERROR_NON_ZERO_ADDRESS":                     10,
		"SUI_MOVE_VERIFICATION_ERROR":                        11,
		"MOVE_PRIMITIVE_RUNTIME_ERROR":                       12,
		"MOVE_ABORT":                                         13,
		"VM_VERIFICATION_OR_DESERIALIZATION_ERROR":           14,
		"VM_INVARIANT_VIOLATION":                             15,
		"FUNCTION_NOT_FOUND":                                 16,
		"ARITY_MISMATCH":                                     17,
		"TYPE_ARITY_MISMATCH":                                18,
		"NON_ENTRY_FUNCTION_INVOKED":                         19,
		"COMMAND_ARGUMENT_ERROR":                             20,
		"TYPE_ARGUMENT_ERROR":                                21,
		"UNUSED_VALUE_WITHOUT_DROP":                          22,
		"INVALID_PUBLIC_FUNCTION_RETURN_TYPE":                23,
		"INVALID_TRANSFER_OBJECT":                            24,
		"EFFECTS_TOO_LARGE":                                  25,
		"PUBLISH_UPGRADE_MISSING_DEPENDENCY":                 26,
		"PUBLISH_UPGRADE_DEPENDENCY_DOWNGRADE":               27,
		"PACKAGE_UPGRADE_ERROR":                              28,
		"WRITTEN_OBJECTS_TOO_LARGE":                          29,
		"CERTIFICATE_DENIED":                                 30,
		"SUI_MOVE_VERIFICATION_TIMEDOUT":                     31,
		"SHARED_OBJECT_OPERATION_NOT_ALLOWED":                32,
		"INPUT_OBJECT_DELETED":                               33,
		"EXECUTION_CANCELED_DUE_TO_SHARED_OBJECT_CONGESTION": 34,
		"ADDRESS_DENIED_FOR_COIN":                            35,
		"COIN_TYPE_GLOBAL_PAUSE":                             36,
		"EXECUTION_CANCELED_DUE_TO_RANDOMNESS_UNAVAILABLE":   37,
	}
)

func (x ExecutionError_ExecutionErrorKind) Enum() *ExecutionError_ExecutionErrorKind {
	p := new(ExecutionError_ExecutionErrorKind)
	*p = x
	return p
}

func (x ExecutionError_ExecutionErrorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionError_ExecutionErrorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_sui_rpc_v2beta_execution_status_proto_enumTypes[0].Descriptor()
}

func (ExecutionError_ExecutionErrorKind) Type() protoreflect.EnumType {
	return &file_sui_rpc_v2beta_execution_status_proto_enumTypes[0]
}

func (x ExecutionError_ExecutionErrorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionError_ExecutionErrorKind.Descriptor instead.
func (ExecutionError_ExecutionErrorKind) EnumDescriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_execution_status_proto_rawDescGZIP(), []int{1, 0}
}

type CommandArgumentError_CommandArgumentErrorKind int32

const (
	CommandArgumentError_COMMAND_ARGUMENT_ERROR_KIND_UNKNOWN CommandArgumentError_CommandArgumentErrorKind = 0
	// The type of the value does not match the expected type.
	CommandArgumentError_TYPE_MISMATCH CommandArgumentError_CommandArgumentErrorKind = 1
	// The argument cannot be deserialized into a value of the specified type.
	CommandArgumentError_INVALID_BCS_BYTES CommandArgumentError_CommandArgumentErrorKind = 2
	// The argument cannot be instantiated from raw bytes.
	CommandArgumentError_INVALID_USAGE_OF_PURE_ARGUMENT CommandArgumentError_CommandArgumentErrorKind = 3
	// Invalid argument to private entry function.
	// Private entry functions cannot take arguments from other Move functions.
	CommandArgumentError_INVALID_ARGUMENT_TO_PRIVATE_ENTRY_FUNCTION CommandArgumentError_CommandArgumentErrorKind = 4
	// Out of bounds access to input or results.
	//
	// `index` field will be set indicating the invalid index value.
	CommandArgumentError_INDEX_OUT_OF_BOUNDS CommandArgumentError_CommandArgumentErrorKind = 5
	// Out of bounds access to subresult.
	//
	// `index` and `subresult` fields will be set indicating the invalid index value.
	CommandArgumentError_SECONDARY_INDEX_OUT_OF_BOUNDS CommandArgumentError_CommandArgumentErrorKind = 6
	// Invalid usage of result.
	// Expected a single result but found either no return value or multiple.
	// `index` field will be set indicating the invalid index value.
	CommandArgumentError_INVALID_RESULT_ARITY CommandArgumentError_CommandArgumentErrorKind = 7
	// Invalid usage of gas coin.
	// The gas coin can only be used by-value with a `TransferObject` command.
	CommandArgumentError_INVALID_GAS_COIN_USAGE CommandArgumentError_CommandArgumentErrorKind = 8
	// Invalid usage of Move value.
	//   - Mutably borrowed values require unique usage.
	//   - Immutably borrowed values cannot be taken or borrowed mutably.
	//   - Taken values cannot be used again.
	CommandArgumentError_INVALID_VALUE_USAGE CommandArgumentError_CommandArgumentErrorKind = 9
	// Immutable objects cannot be passed by-value.
	CommandArgumentError_INVALID_OBJECT_BY_VALUE CommandArgumentError_CommandArgumentErrorKind = 10
	// Immutable objects cannot be passed by mutable reference, `&mut`.
	CommandArgumentError_INVALID_OBJECT_BY_MUT_REF CommandArgumentError_CommandArgumentErrorKind = 11
	// Shared object operations such as wrapping, freezing, or converting to owned are not
	// allowed.
	CommandArgumentError_SHARED_OBJECT_OPERATION_NOT_ALLOWED CommandArgumentError_CommandArgumentErrorKind = 12
)

// Enum value maps for CommandArgumentError_CommandArgumentErrorKind.
var (
	CommandArgumentError_CommandArgumentErrorKind_name = map[int32]string{
		0:  "COMMAND_ARGUMENT_ERROR_KIND_UNKNOWN",
		1:  "TYPE_MISMATCH",
		2:  "INVALID_BCS_BYTES",
		3:  "INVALID_USAGE_OF_PURE_ARGUMENT",
		4:  "INVALID_ARGUMENT_TO_PRIVATE_ENTRY_FUNCTION",
		5:  "INDEX_OUT_OF_BOUNDS",
		6:  "SECONDARY_INDEX_OUT_OF_BOUNDS",
		7:  "INVALID_RESULT_ARITY",
		8:  "INVALID_GAS_COIN_USAGE",
		9:  "INVALID_VALUE_USAGE",
		10: "INVALID_OBJECT_BY_VALUE",
		11: "INVALID_OBJECT_BY_MUT_REF",
		12: "SHARED_OBJECT_OPERATION_NOT_ALLOWED",
	}
	CommandArgumentError_CommandArgumentErrorKind_value = map[string]int32{
		"COMMAND_ARGUMENT_ERROR_KIND_UNKNOWN":        0,
		"TYPE_MISMATCH":                              1,
		"INVALID_BCS_BYTES":                          2,
		"INVALID_USAGE_OF_PURE_ARGUMENT":             3,
		"INVALID_ARGUMENT_TO_PRIVATE_ENTRY_FUNCTION": 4,
		"INDEX_OUT_OF_BOUNDS":                        5,
		"SECONDARY_INDEX_OUT_OF_BOUNDS":              6,
		"INVALID_RESULT_ARITY":                       7,
		"INVALID_GAS_COIN_USAGE":                     8,
		"INVALID_VALUE_USAGE":                        9,
		"INVALID_OBJECT_BY_VALUE":                    10,
		"INVALID_OBJECT_BY_MUT_REF":                  11,
		"SHARED_OBJECT_OPERATION_NOT_ALLOWED":        12,
	}
)

func (x CommandArgumentError_CommandArgumentErrorKind) Enum() *CommandArgumentError_CommandArgumentErrorKind {
	p := new(CommandArgumentError_CommandArgumentErrorKind)
	*p = x
	return p
}

func (x CommandArgumentError_CommandArgumentErrorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandArgumentError_CommandArgumentErrorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_sui_rpc_v2beta_execution_status_proto_enumTypes[1].Descriptor()
}

func (CommandArgumentError_CommandArgumentErrorKind) Type() protoreflect.EnumType {
	return &file_sui_rpc_v2beta_execution_status_proto_enumTypes[1]
}

func (x CommandArgumentError_CommandArgumentErrorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandArgumentError_CommandArgumentErrorKind.Descriptor instead.
func (CommandArgumentError_CommandArgumentErrorKind) EnumDescriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_execution_status_proto_rawDescGZIP(), []int{4, 0}
}

type PackageUpgradeError_PackageUpgradeErrorKind int32

const (
	PackageUpgradeError_PACKAGE_UPGRADE_ERROR_KIND_UNKNOWN PackageUpgradeError_PackageUpgradeErrorKind = 0
	// Unable to fetch package.
	PackageUpgradeError_UNABLE_TO_FETCH_PACKAGE PackageUpgradeError_PackageUpgradeErrorKind = 1
	// Object is not a package.
	PackageUpgradeError_NOT_A_PACKAGE PackageUpgradeError_PackageUpgradeErrorKind = 2
	// Package upgrade is incompatible with previous version.
	PackageUpgradeError_INCOMPATIBLE_UPGRADE PackageUpgradeError_PackageUpgradeErrorKind = 3
	// Digest in upgrade ticket and computed digest differ.
	PackageUpgradeError_DIGETS_DOES_NOT_MATCH PackageUpgradeError_PackageUpgradeErrorKind = 4
	// Upgrade policy is not valid.
	PackageUpgradeError_UNKNOWN_UPGRADE_POLICY PackageUpgradeError_PackageUpgradeErrorKind = 5
	// Package ID does not match `PackageId` in upgrade ticket.
	PackageUpgradeError_PACKAGE_ID_DOES_NOT_MATCH PackageUpgradeError_PackageUpgradeErrorKind = 6
)

// Enum value maps for PackageUpgradeError_PackageUpgradeErrorKind.
var (
	PackageUpgradeError_PackageUpgradeErrorKind_name = map[int32]string{
		0: "PACKAGE_UPGRADE_ERROR_KIND_UNKNOWN",
		1: "UNABLE_TO_FETCH_PACKAGE",
		2: "NOT_A_PACKAGE",
		3: "INCOMPATIBLE_UPGRADE",
		4: "DIGETS_DOES_NOT_MATCH",
		5: "UNKNOWN_UPGRADE_POLICY",
		6: "PACKAGE_ID_DOES_NOT_MATCH",
	}
	PackageUpgradeError_PackageUpgradeErrorKind_value = map[string]int32{
		"PACKAGE_UPGRADE_ERROR_KIND_UNKNOWN": 0,
		"UNABLE_TO_FETCH_PACKAGE":            1,
		"NOT_A_PACKAGE":                      2,
		"INCOMPATIBLE_UPGRADE":               3,
		"DIGETS_DOES_NOT_MATCH":              4,
		"UNKNOWN_UPGRADE_POLICY":             5,
		"PACKAGE_ID_DOES_NOT_MATCH":          6,
	}
)

func (x PackageUpgradeError_PackageUpgradeErrorKind) Enum() *PackageUpgradeError_PackageUpgradeErrorKind {
	p := new(PackageUpgradeError_PackageUpgradeErrorKind)
	*p = x
	return p
}

func (x PackageUpgradeError_PackageUpgradeErrorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageUpgradeError_PackageUpgradeErrorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_sui_rpc_v2beta_execution_status_proto_enumTypes[2].Descriptor()
}

func (PackageUpgradeError_PackageUpgradeErrorKind) Type() protoreflect.EnumType {
	return &file_sui_rpc_v2beta_execution_status_proto_enumTypes[2]
}

func (x PackageUpgradeError_PackageUpgradeErrorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageUpgradeError_PackageUpgradeErrorKind.Descriptor instead.
func (PackageUpgradeError_PackageUpgradeErrorKind) EnumDescriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_execution_status_proto_rawDescGZIP(), []int{5, 0}
}

type TypeArgumentError_TypeArgumentErrorKind int32

const (
	TypeArgumentError_TYPE_ARGUMENT_ERROR_KIND_UNKNOWN TypeArgumentError_TypeArgumentErrorKind = 0
	// A type was not found in the module specified.
	TypeArgumentError_TYPE_NOT_FOUND TypeArgumentError_TypeArgumentErrorKind = 1
	// A type provided did not match the specified constraint.
	TypeArgumentError_CONSTRAINT_NOT_SATISFIED TypeArgumentError_TypeArgumentErrorKind = 2
)

// Enum value maps for TypeArgumentError_TypeArgumentErrorKind.
var (
	TypeArgumentError_TypeArgumentErrorKind_name = map[int32]string{
		0: "TYPE_ARGUMENT_ERROR_KIND_UNKNOWN",
		1: "TYPE_NOT_FOUND",
		2: "CONSTRAINT_NOT_SATISFIED",
	}
	TypeArgumentError_TypeArgumentErrorKind_value = map[string]int32{
		"TYPE_ARGUMENT_ERROR_KIND_UNKNOWN": 0,
		"TYPE_NOT_FOUND":                   1,
		"CONSTRAINT_NOT_SATISFIED":         2,
	}
)

func (x TypeArgumentError_TypeArgumentErrorKind) Enum() *TypeArgumentError_TypeArgumentErrorKind {
	p := new(TypeArgumentError_TypeArgumentErrorKind)
	*p = x
	return p
}

func (x TypeArgumentError_TypeArgumentErrorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeArgumentError_TypeArgumentErrorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_sui_rpc_v2beta_execution_status_proto_enumTypes[3].Descriptor()
}

func (TypeArgumentError_TypeArgumentErrorKind) Type() protoreflect.EnumType {
	return &file_sui_rpc_v2beta_execution_status_proto_enumTypes[3]
}

func (x TypeArgumentError_TypeArgumentErrorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeArgumentError_TypeArgumentErrorKind.Descriptor instead.
func (TypeArgumentError_TypeArgumentErrorKind) EnumDescriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_execution_status_proto_rawDescGZIP(), []int{6, 0}
}

// The status of an executed transaction.
type ExecutionStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates if the transaction was successful or not.
	Success *bool `protobuf:"varint,1,opt,name=success,proto3,oneof" json:"success,omitempty"`
	// The error if `success` is false.
	Error         *ExecutionError `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionStatus) Reset() {
	*x = ExecutionStatus{}
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatus) ProtoMessage() {}

func (x *ExecutionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatus.ProtoReflect.Descriptor instead.
func (*ExecutionStatus) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_execution_status_proto_rawDescGZIP(), []int{0}
}

func (x *ExecutionStatus) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *ExecutionStatus) GetError() *ExecutionError {
	if x != nil {
		return x.Error
	}
	return nil
}

// An error that can occur during the execution of a transaction.
type ExecutionError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The command, if any, during which the error occurred.
	Command *uint64                            `protobuf:"varint,1,opt,name=command,proto3,oneof" json:"command,omitempty"`
	Kind    *ExecutionError_ExecutionErrorKind `protobuf:"varint,2,opt,name=kind,proto3,enum=sui.rpc.v2beta.ExecutionError_ExecutionErrorKind,oneof" json:"kind,omitempty"`
	// Abort code from Move.
	AbortCode *uint64 `protobuf:"varint,3,opt,name=abort_code,json=abortCode,proto3,oneof" json:"abort_code,omitempty"`
	// Location in Move where the error occurred.
	Location             *MoveLocation         `protobuf:"bytes,4,opt,name=location,proto3,oneof" json:"location,omitempty"`
	SizeError            *SizeError            `protobuf:"bytes,5,opt,name=size_error,json=sizeError,proto3,oneof" json:"size_error,omitempty"`
	CommandArgumentError *CommandArgumentError `protobuf:"bytes,6,opt,name=command_argument_error,json=commandArgumentError,proto3,oneof" json:"command_argument_error,omitempty"`
	TypeArgumentError    *TypeArgumentError    `protobuf:"bytes,7,opt,name=type_argument_error,json=typeArgumentError,proto3,oneof" json:"type_argument_error,omitempty"`
	PackageUpgradeError  *PackageUpgradeError  `protobuf:"bytes,8,opt,name=package_upgrade_error,json=packageUpgradeError,proto3,oneof" json:"package_upgrade_error,omitempty"`
	// Index of an input or result.
	Index *uint32 `protobuf:"varint,9,opt,name=index,proto3,oneof" json:"index,omitempty"`
	// Index of a subresult.
	Subresult *uint32 `protobuf:"varint,10,opt,name=subresult,proto3,oneof" json:"subresult,omitempty"`
	ObjectId  *string `protobuf:"bytes,11,opt,name=object_id,json=objectId,proto3,oneof" json:"object_id,omitempty"`
	// Denied address.
	Address *string `protobuf:"bytes,12,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// Coin type.
	CoinType *string `protobuf:"bytes,13,opt,name=coin_type,json=coinType,proto3,oneof" json:"coin_type,omitempty"`
	// Set of objects that were congested, leading to the transaction's cancellation.
	CongestedObjects []string `protobuf:"bytes,14,rep,name=congested_objects,json=congestedObjects,proto3" json:"congested_objects,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExecutionError) Reset() {
	*x = ExecutionError{}
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionError) ProtoMessage() {}

func (x *ExecutionError) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionError.ProtoReflect.Descriptor instead.
func (*ExecutionError) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_execution_status_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutionError) GetCommand() uint64 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *ExecutionError) GetKind() ExecutionError_ExecutionErrorKind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ExecutionError_EXECUTION_ERROR_KIND_UNKNOWN
}

func (x *ExecutionError) GetAbortCode() uint64 {
	if x != nil && x.AbortCode != nil {
		return *x.AbortCode
	}
	return 0
}

func (x *ExecutionError) GetLocation() *MoveLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ExecutionError) GetSizeError() *SizeError {
	if x != nil {
		return x.SizeError
	}
	return nil
}

func (x *ExecutionError) GetCommandArgumentError() *CommandArgumentError {
	if x != nil {
		return x.CommandArgumentError
	}
	return nil
}

func (x *ExecutionError) GetTypeArgumentError() *TypeArgumentError {
	if x != nil {
		return x.TypeArgumentError
	}
	return nil
}

func (x *ExecutionError) GetPackageUpgradeError() *PackageUpgradeError {
	if x != nil {
		return x.PackageUpgradeError
	}
	return nil
}

func (x *ExecutionError) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ExecutionError) GetSubresult() uint32 {
	if x != nil && x.Subresult != nil {
		return *x.Subresult
	}
	return 0
}

func (x *ExecutionError) GetObjectId() string {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return ""
}

func (x *ExecutionError) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *ExecutionError) GetCoinType() string {
	if x != nil && x.CoinType != nil {
		return *x.CoinType
	}
	return ""
}

func (x *ExecutionError) GetCongestedObjects() []string {
	if x != nil {
		return x.CongestedObjects
	}
	return nil
}

// A size error.
type SizeError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The offending size.
	Size *uint64 `protobuf:"varint,1,opt,name=size,proto3,oneof" json:"size,omitempty"`
	// The maximum allowable size.
	MaxSize       *uint64 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3,oneof" json:"max_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SizeError) Reset() {
	*x = SizeError{}
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SizeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SizeError) ProtoMessage() {}

func (x *SizeError) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SizeError.ProtoReflect.Descriptor instead.
func (*SizeError) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_execution_status_proto_rawDescGZIP(), []int{2}
}

func (x *SizeError) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *SizeError) GetMaxSize() uint64 {
	if x != nil && x.MaxSize != nil {
		return *x.MaxSize
	}
	return 0
}

// Location in Move bytecode where an error occurred.
type MoveLocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The package ID.
	Package *string `protobuf:"bytes,1,opt,name=package,proto3,oneof" json:"package,omitempty"`
	// The module name.
	Module *string `protobuf:"bytes,2,opt,name=module,proto3,oneof" json:"module,omitempty"`
	// The function index.
	Function *uint32 `protobuf:"varint,3,opt,name=function,proto3,oneof" json:"function,omitempty"`
	// Offset of the instruction where the error occurred.
	Instruction *uint32 `protobuf:"varint,4,opt,name=instruction,proto3,oneof" json:"instruction,omitempty"`
	// The name of the function, if available.
	FunctionName  *string `protobuf:"bytes,5,opt,name=function_name,json=functionName,proto3,oneof" json:"function_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveLocation) Reset() {
	*x = MoveLocation{}
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveLocation) ProtoMessage() {}

func (x *MoveLocation) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveLocation.ProtoReflect.Descriptor instead.
func (*MoveLocation) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_execution_status_proto_rawDescGZIP(), []int{3}
}

func (x *MoveLocation) GetPackage() string {
	if x != nil && x.Package != nil {
		return *x.Package
	}
	return ""
}

func (x *MoveLocation) GetModule() string {
	if x != nil && x.Module != nil {
		return *x.Module
	}
	return ""
}

func (x *MoveLocation) GetFunction() uint32 {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return 0
}

func (x *MoveLocation) GetInstruction() uint32 {
	if x != nil && x.Instruction != nil {
		return *x.Instruction
	}
	return 0
}

func (x *MoveLocation) GetFunctionName() string {
	if x != nil && x.FunctionName != nil {
		return *x.FunctionName
	}
	return ""
}

// An error with an argument to a command.
type CommandArgumentError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Position of the problematic argument.
	Argument *uint32                                        `protobuf:"varint,1,opt,name=argument,proto3,oneof" json:"argument,omitempty"`
	Kind     *CommandArgumentError_CommandArgumentErrorKind `protobuf:"varint,2,opt,name=kind,proto3,enum=sui.rpc.v2beta.CommandArgumentError_CommandArgumentErrorKind,oneof" json:"kind,omitempty"`
	// Index of an input or result.
	Index *uint32 `protobuf:"varint,3,opt,name=index,proto3,oneof" json:"index,omitempty"`
	// Index of a subresult.
	Subresult     *uint32 `protobuf:"varint,4,opt,name=subresult,proto3,oneof" json:"subresult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandArgumentError) Reset() {
	*x = CommandArgumentError{}
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandArgumentError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandArgumentError) ProtoMessage() {}

func (x *CommandArgumentError) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandArgumentError.ProtoReflect.Descriptor instead.
func (*CommandArgumentError) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_execution_status_proto_rawDescGZIP(), []int{4}
}

func (x *CommandArgumentError) GetArgument() uint32 {
	if x != nil && x.Argument != nil {
		return *x.Argument
	}
	return 0
}

func (x *CommandArgumentError) GetKind() CommandArgumentError_CommandArgumentErrorKind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return CommandArgumentError_COMMAND_ARGUMENT_ERROR_KIND_UNKNOWN
}

func (x *CommandArgumentError) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CommandArgumentError) GetSubresult() uint32 {
	if x != nil && x.Subresult != nil {
		return *x.Subresult
	}
	return 0
}

// An error with upgrading a package.
type PackageUpgradeError struct {
	state protoimpl.MessageState                       `protogen:"open.v1"`
	Kind  *PackageUpgradeError_PackageUpgradeErrorKind `protobuf:"varint,1,opt,name=kind,proto3,enum=sui.rpc.v2beta.PackageUpgradeError_PackageUpgradeErrorKind,oneof" json:"kind,omitempty"`
	// The Package Id.
	PackageId *string `protobuf:"bytes,2,opt,name=package_id,json=packageId,proto3,oneof" json:"package_id,omitempty"`
	// A digest.
	Digest *string `protobuf:"bytes,3,opt,name=digest,proto3,oneof" json:"digest,omitempty"`
	// The policy.
	Policy *uint32 `protobuf:"varint,4,opt,name=policy,proto3,oneof" json:"policy,omitempty"`
	// The ticket Id.
	TicketId      *string `protobuf:"bytes,5,opt,name=ticket_id,json=ticketId,proto3,oneof" json:"ticket_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PackageUpgradeError) Reset() {
	*x = PackageUpgradeError{}
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackageUpgradeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageUpgradeError) ProtoMessage() {}

func (x *PackageUpgradeError) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageUpgradeError.ProtoReflect.Descriptor instead.
func (*PackageUpgradeError) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_execution_status_proto_rawDescGZIP(), []int{5}
}

func (x *PackageUpgradeError) GetKind() PackageUpgradeError_PackageUpgradeErrorKind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return PackageUpgradeError_PACKAGE_UPGRADE_ERROR_KIND_UNKNOWN
}

func (x *PackageUpgradeError) GetPackageId() string {
	if x != nil && x.PackageId != nil {
		return *x.PackageId
	}
	return ""
}

func (x *PackageUpgradeError) GetDigest() string {
	if x != nil && x.Digest != nil {
		return *x.Digest
	}
	return ""
}

func (x *PackageUpgradeError) GetPolicy() uint32 {
	if x != nil && x.Policy != nil {
		return *x.Policy
	}
	return 0
}

func (x *PackageUpgradeError) GetTicketId() string {
	if x != nil && x.TicketId != nil {
		return *x.TicketId
	}
	return ""
}

// Type argument error.
type TypeArgumentError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Index of the problematic type argument.
	TypeArgument  *uint32                                  `protobuf:"varint,1,opt,name=type_argument,json=typeArgument,proto3,oneof" json:"type_argument,omitempty"`
	Kind          *TypeArgumentError_TypeArgumentErrorKind `protobuf:"varint,2,opt,name=kind,proto3,enum=sui.rpc.v2beta.TypeArgumentError_TypeArgumentErrorKind,oneof" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TypeArgumentError) Reset() {
	*x = TypeArgumentError{}
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeArgumentError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeArgumentError) ProtoMessage() {}

func (x *TypeArgumentError) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2beta_execution_status_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeArgumentError.ProtoReflect.Descriptor instead.
func (*TypeArgumentError) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2beta_execution_status_proto_rawDescGZIP(), []int{6}
}

func (x *TypeArgumentError) GetTypeArgument() uint32 {
	if x != nil && x.TypeArgument != nil {
		return *x.TypeArgument
	}
	return 0
}

func (x *TypeArgumentError) GetKind() TypeArgumentError_TypeArgumentErrorKind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return TypeArgumentError_TYPE_ARGUMENT_ERROR_KIND_UNKNOWN
}

var File_sui_rpc_v2beta_execution_status_proto protoreflect.FileDescriptor

const file_sui_rpc_v2beta_execution_status_proto_rawDesc = "" +
	"\n" +
	"%sui/rpc/v2beta/execution_status.proto\x12\x0esui.rpc.v2beta\"\x81\x01\n" +
	"\x0fExecutionStatus\x12\x1d\n" +
	"\asuccess\x18\x01 \x01(\bH\x00R\asuccess\x88\x01\x01\x129\n" +
	"\x05error\x18\x02 \x01(\v2\x1e.sui.rpc.v2beta.ExecutionErrorH\x01R\x05error\x88\x01\x01B\n" +
	"\n" +
	"\b_successB\b\n" +
	"\x06_error\"\xf9\x10\n" +
	"\x0eExecutionError\x12\x1d\n" +
	"\acommand\x18\x01 \x01(\x04H\x00R\acommand\x88\x01\x01\x12J\n" +
	"\x04kind\x18\x02 \x01(\x0e21.sui.rpc.v2beta.ExecutionError.ExecutionErrorKindH\x01R\x04kind\x88\x01\x01\x12\"\n" +
	"\n" +
	"abort_code\x18\x03 \x01(\x04H\x02R\tabortCode\x88\x01\x01\x12=\n" +
	"\blocation\x18\x04 \x01(\v2\x1c.sui.rpc.v2beta.MoveLocationH\x03R\blocation\x88\x01\x01\x12=\n" +
	"\n" +
	"size_error\x18\x05 \x01(\v2\x19.sui.rpc.v2beta.SizeErrorH\x04R\tsizeError\x88\x01\x01\x12_\n" +
	"\x16command_argument_error\x18\x06 \x01(\v2$.sui.rpc.v2beta.CommandArgumentErrorH\x05R\x14commandArgumentError\x88\x01\x01\x12V\n" +
	"\x13type_argument_error\x18\a \x01(\v2!.sui.rpc.v2beta.TypeArgumentErrorH\x06R\x11typeArgumentError\x88\x01\x01\x12\\\n" +
	"\x15package_upgrade_error\x18\b \x01(\v2#.sui.rpc.v2beta.PackageUpgradeErrorH\aR\x13packageUpgradeError\x88\x01\x01\x12\x19\n" +
	"\x05index\x18\t \x01(\rH\bR\x05index\x88\x01\x01\x12!\n" +
	"\tsubresult\x18\n" +
	" \x01(\rH\tR\tsubresult\x88\x01\x01\x12 \n" +
	"\tobject_id\x18\v \x01(\tH\n" +
	"R\bobjectId\x88\x01\x01\x12\x1d\n" +
	"\aaddress\x18\f \x01(\tH\vR\aaddress\x88\x01\x01\x12 \n" +
	"\tcoin_type\x18\r \x01(\tH\fR\bcoinType\x88\x01\x01\x12+\n" +
	"\x11congested_objects\x18\x0e \x03(\tR\x10congestedObjects\"\xa7\t\n" +
	"\x12ExecutionErrorKind\x12 \n" +
	"\x1cEXECUTION_ERROR_KIND_UNKNOWN\x10\x00\x12\x14\n" +
	"\x10INSUFFICIENT_GAS\x10\x01\x12\x16\n" +
	"\x12INVALID_GAS_OBJECT\x10\x02\x12\x17\n" +
	"\x13INVARIANT_VIOLATION\x10\x03\x12\x1d\n" +
	"\x19FEATURE_NOT_YET_SUPPORTED\x10\x04\x12\x12\n" +
	"\x0eOBJECT_TOO_BIG\x10\x05\x12\x13\n" +
	"\x0fPACKAGE_TOO_BIG\x10\x06\x12\x1d\n" +
	"\x19CIRCULAR_OBJECT_OWNERSHIP\x10\a\x12\x1d\n" +
	"\x19INSUFFICIENT_COIN_BALANCE\x10\b\x12\x19\n" +
	"\x15COIN_BALANCE_OVERFLOW\x10\t\x12\"\n" +
	"\x1ePUBLISH_ERROR_NON_ZERO_ADDRESS\x10\n" +
	"\x12\x1f\n" +
	"\x1bSUI_MOVE_VERIFICATION_ERROR\x10\v\x12 \n" +
	"\x1cMOVE_PRIMITIVE_RUNTIME_ERROR\x10\f\x12\x0e\n" +
	"\n" +
	"MOVE_ABORT\x10\r\x12,\n" +
	"(VM_VERIFICATION_OR_DESERIALIZATION_ERROR\x10\x0e\x12\x1a\n" +
	"\x16VM_INVARIANT_VIOLATION\x10\x0f\x12\x16\n" +
	"\x12FUNCTION_NOT_FOUND\x10\x10\x12\x12\n" +
	"\x0eARITY_MISMATCH\x10\x11\x12\x17\n" +
	"\x13TYPE_ARITY_MISMATCH\x10\x12\x12\x1e\n" +
	"\x1aNON_ENTRY_FUNCTION_INVOKED\x10\x13\x12\x1a\n" +
	"\x16COMMAND_ARGUMENT_ERROR\x10\x14\x12\x17\n" +
	"\x13TYPE_ARGUMENT_ERROR\x10\x15\x12\x1d\n" +
	"\x19UNUSED_VALUE_WITHOUT_DROP\x10\x16\x12'\n" +
	"#INVALID_PUBLIC_FUNCTION_RETURN_TYPE\x10\x17\x12\x1b\n" +
	"\x17INVALID_TRANSFER_OBJECT\x10\x18\x12\x15\n" +
	"\x11EFFECTS_TOO_LARGE\x10\x19\x12&\n" +
	"\"PUBLISH_UPGRADE_MISSING_DEPENDENCY\x10\x1a\x12(\n" +
	"$PUBLISH_UPGRADE_DEPENDENCY_DOWNGRADE\x10\x1b\x12\x19\n" +
	"\x15PACKAGE_UPGRADE_ERROR\x10\x1c\x12\x1d\n" +
	"\x19WRITTEN_OBJECTS_TOO_LARGE\x10\x1d\x12\x16\n" +
	"\x12CERTIFICATE_DENIED\x10\x1e\x12\"\n" +
	"\x1eSUI_MOVE_VERIFICATION_TIMEDOUT\x10\x1f\x12'\n" +
	"#SHARED_OBJECT_OPERATION_NOT_ALLOWED\x10 \x12\x18\n" +
	"\x14INPUT_OBJECT_DELETED\x10!\x126\n" +
	"2EXECUTION_CANCELED_DUE_TO_SHARED_OBJECT_CONGESTION\x10\"\x12\x1b\n" +
	"\x17ADDRESS_DENIED_FOR_COIN\x10#\x12\x1a\n" +
	"\x16COIN_TYPE_GLOBAL_PAUSE\x10$\x124\n" +
	"0EXECUTION_CANCELED_DUE_TO_RANDOMNESS_UNAVAILABLE\x10%B\n" +
	"\n" +
	"\b_commandB\a\n" +
	"\x05_kindB\r\n" +
	"\v_abort_codeB\v\n" +
	"\t_locationB\r\n" +
	"\v_size_errorB\x19\n" +
	"\x17_command_argument_errorB\x16\n" +
	"\x14_type_argument_errorB\x18\n" +
	"\x16_package_upgrade_errorB\b\n" +
	"\x06_indexB\f\n" +
	"\n" +
	"_subresultB\f\n" +
	"\n" +
	"_object_idB\n" +
	"\n" +
	"\b_addressB\f\n" +
	"\n" +
	"_coin_type\"Z\n" +
	"\tSizeError\x12\x17\n" +
	"\x04size\x18\x01 \x01(\x04H\x00R\x04size\x88\x01\x01\x12\x1e\n" +
	"\bmax_size\x18\x02 \x01(\x04H\x01R\amaxSize\x88\x01\x01B\a\n" +
	"\x05_sizeB\v\n" +
	"\t_max_size\"\x82\x02\n" +
	"\fMoveLocation\x12\x1d\n" +
	"\apackage\x18\x01 \x01(\tH\x00R\apackage\x88\x01\x01\x12\x1b\n" +
	"\x06module\x18\x02 \x01(\tH\x01R\x06module\x88\x01\x01\x12\x1f\n" +
	"\bfunction\x18\x03 \x01(\rH\x02R\bfunction\x88\x01\x01\x12%\n" +
	"\vinstruction\x18\x04 \x01(\rH\x03R\vinstruction\x88\x01\x01\x12(\n" +
	"\rfunction_name\x18\x05 \x01(\tH\x04R\ffunctionName\x88\x01\x01B\n" +
	"\n" +
	"\b_packageB\t\n" +
	"\a_moduleB\v\n" +
	"\t_functionB\x0e\n" +
	"\f_instructionB\x10\n" +
	"\x0e_function_name\"\xaf\x05\n" +
	"\x14CommandArgumentError\x12\x1f\n" +
	"\bargument\x18\x01 \x01(\rH\x00R\bargument\x88\x01\x01\x12V\n" +
	"\x04kind\x18\x02 \x01(\x0e2=.sui.rpc.v2beta.CommandArgumentError.CommandArgumentErrorKindH\x01R\x04kind\x88\x01\x01\x12\x19\n" +
	"\x05index\x18\x03 \x01(\rH\x02R\x05index\x88\x01\x01\x12!\n" +
	"\tsubresult\x18\x04 \x01(\rH\x03R\tsubresult\x88\x01\x01\"\xb1\x03\n" +
	"\x18CommandArgumentErrorKind\x12'\n" +
	"#COMMAND_ARGUMENT_ERROR_KIND_UNKNOWN\x10\x00\x12\x11\n" +
	"\rTYPE_MISMATCH\x10\x01\x12\x15\n" +
	"\x11INVALID_BCS_BYTES\x10\x02\x12\"\n" +
	"\x1eINVALID_USAGE_OF_PURE_ARGUMENT\x10\x03\x12.\n" +
	"*INVALID_ARGUMENT_TO_PRIVATE_ENTRY_FUNCTION\x10\x04\x12\x17\n" +
	"\x13INDEX_OUT_OF_BOUNDS\x10\x05\x12!\n" +
	"\x1dSECONDARY_INDEX_OUT_OF_BOUNDS\x10\x06\x12\x18\n" +
	"\x14INVALID_RESULT_ARITY\x10\a\x12\x1a\n" +
	"\x16INVALID_GAS_COIN_USAGE\x10\b\x12\x17\n" +
	"\x13INVALID_VALUE_USAGE\x10\t\x12\x1b\n" +
	"\x17INVALID_OBJECT_BY_VALUE\x10\n" +
	"\x12\x1d\n" +
	"\x19INVALID_OBJECT_BY_MUT_REF\x10\v\x12'\n" +
	"#SHARED_OBJECT_OPERATION_NOT_ALLOWED\x10\fB\v\n" +
	"\t_argumentB\a\n" +
	"\x05_kindB\b\n" +
	"\x06_indexB\f\n" +
	"\n" +
	"_subresult\"\x8b\x04\n" +
	"\x13PackageUpgradeError\x12T\n" +
	"\x04kind\x18\x01 \x01(\x0e2;.sui.rpc.v2beta.PackageUpgradeError.PackageUpgradeErrorKindH\x00R\x04kind\x88\x01\x01\x12\"\n" +
	"\n" +
	"package_id\x18\x02 \x01(\tH\x01R\tpackageId\x88\x01\x01\x12\x1b\n" +
	"\x06digest\x18\x03 \x01(\tH\x02R\x06digest\x88\x01\x01\x12\x1b\n" +
	"\x06policy\x18\x04 \x01(\rH\x03R\x06policy\x88\x01\x01\x12 \n" +
	"\tticket_id\x18\x05 \x01(\tH\x04R\bticketId\x88\x01\x01\"\xe1\x01\n" +
	"\x17PackageUpgradeErrorKind\x12&\n" +
	"\"PACKAGE_UPGRADE_ERROR_KIND_UNKNOWN\x10\x00\x12\x1b\n" +
	"\x17UNABLE_TO_FETCH_PACKAGE\x10\x01\x12\x11\n" +
	"\rNOT_A_PACKAGE\x10\x02\x12\x18\n" +
	"\x14INCOMPATIBLE_UPGRADE\x10\x03\x12\x19\n" +
	"\x15DIGETS_DOES_NOT_MATCH\x10\x04\x12\x1a\n" +
	"\x16UNKNOWN_UPGRADE_POLICY\x10\x05\x12\x1d\n" +
	"\x19PACKAGE_ID_DOES_NOT_MATCH\x10\x06B\a\n" +
	"\x05_kindB\r\n" +
	"\v_package_idB\t\n" +
	"\a_digestB\t\n" +
	"\a_policyB\f\n" +
	"\n" +
	"_ticket_id\"\x9b\x02\n" +
	"\x11TypeArgumentError\x12(\n" +
	"\rtype_argument\x18\x01 \x01(\rH\x00R\ftypeArgument\x88\x01\x01\x12P\n" +
	"\x04kind\x18\x02 \x01(\x0e27.sui.rpc.v2beta.TypeArgumentError.TypeArgumentErrorKindH\x01R\x04kind\x88\x01\x01\"o\n" +
	"\x15TypeArgumentErrorKind\x12$\n" +
	" TYPE_ARGUMENT_ERROR_KIND_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eTYPE_NOT_FOUND\x10\x01\x12\x1c\n" +
	"\x18CONSTRAINT_NOT_SATISFIED\x10\x02B\x10\n" +
	"\x0e_type_argumentB\a\n" +
	"\x05_kindB\x10Z\x0esui/rpc/v2betab\x06proto3"

var (
	file_sui_rpc_v2beta_execution_status_proto_rawDescOnce sync.Once
	file_sui_rpc_v2beta_execution_status_proto_rawDescData []byte
)

func file_sui_rpc_v2beta_execution_status_proto_rawDescGZIP() []byte {
	file_sui_rpc_v2beta_execution_status_proto_rawDescOnce.Do(func() {
		file_sui_rpc_v2beta_execution_status_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sui_rpc_v2beta_execution_status_proto_rawDesc), len(file_sui_rpc_v2beta_execution_status_proto_rawDesc)))
	})
	return file_sui_rpc_v2beta_execution_status_proto_rawDescData
}

var file_sui_rpc_v2beta_execution_status_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_sui_rpc_v2beta_execution_status_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_sui_rpc_v2beta_execution_status_proto_goTypes = []any{
	(ExecutionError_ExecutionErrorKind)(0),             // 0: sui.rpc.v2beta.ExecutionError.ExecutionErrorKind
	(CommandArgumentError_CommandArgumentErrorKind)(0), // 1: sui.rpc.v2beta.CommandArgumentError.CommandArgumentErrorKind
	(PackageUpgradeError_PackageUpgradeErrorKind)(0),   // 2: sui.rpc.v2beta.PackageUpgradeError.PackageUpgradeErrorKind
	(TypeArgumentError_TypeArgumentErrorKind)(0),       // 3: sui.rpc.v2beta.TypeArgumentError.TypeArgumentErrorKind
	(*ExecutionStatus)(nil),                            // 4: sui.rpc.v2beta.ExecutionStatus
	(*ExecutionError)(nil),                             // 5: sui.rpc.v2beta.ExecutionError
	(*SizeError)(nil),                                  // 6: sui.rpc.v2beta.SizeError
	(*MoveLocation)(nil),                               // 7: sui.rpc.v2beta.MoveLocation
	(*CommandArgumentError)(nil),                       // 8: sui.rpc.v2beta.CommandArgumentError
	(*PackageUpgradeError)(nil),                        // 9: sui.rpc.v2beta.PackageUpgradeError
	(*TypeArgumentError)(nil),                          // 10: sui.rpc.v2beta.TypeArgumentError
}
var file_sui_rpc_v2beta_execution_status_proto_depIdxs = []int32{
	5,  // 0: sui.rpc.v2beta.ExecutionStatus.error:type_name -> sui.rpc.v2beta.ExecutionError
	0,  // 1: sui.rpc.v2beta.ExecutionError.kind:type_name -> sui.rpc.v2beta.ExecutionError.ExecutionErrorKind
	7,  // 2: sui.rpc.v2beta.ExecutionError.location:type_name -> sui.rpc.v2beta.MoveLocation
	6,  // 3: sui.rpc.v2beta.ExecutionError.size_error:type_name -> sui.rpc.v2beta.SizeError
	8,  // 4: sui.rpc.v2beta.ExecutionError.command_argument_error:type_name -> sui.rpc.v2beta.CommandArgumentError
	10, // 5: sui.rpc.v2beta.ExecutionError.type_argument_error:type_name -> sui.rpc.v2beta.TypeArgumentError
	9,  // 6: sui.rpc.v2beta.ExecutionError.package_upgrade_error:type_name -> sui.rpc.v2beta.PackageUpgradeError
	1,  // 7: sui.rpc.v2beta.CommandArgumentError.kind:type_name -> sui.rpc.v2beta.CommandArgumentError.CommandArgumentErrorKind
	2,  // 8: sui.rpc.v2beta.PackageUpgradeError.kind:type_name -> sui.rpc.v2beta.PackageUpgradeError.PackageUpgradeErrorKind
	3,  // 9: sui.rpc.v2beta.TypeArgumentError.kind:type_name -> sui.rpc.v2beta.TypeArgumentError.TypeArgumentErrorKind
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_sui_rpc_v2beta_execution_status_proto_init() }
func file_sui_rpc_v2beta_execution_status_proto_init() {
	if File_sui_rpc_v2beta_execution_status_proto != nil {
		return
	}
	file_sui_rpc_v2beta_execution_status_proto_msgTypes[0].OneofWrappers = []any{}
	file_sui_rpc_v2beta_execution_status_proto_msgTypes[1].OneofWrappers = []any{}
	file_sui_rpc_v2beta_execution_status_proto_msgTypes[2].OneofWrappers = []any{}
	file_sui_rpc_v2beta_execution_status_proto_msgTypes[3].OneofWrappers = []any{}
	file_sui_rpc_v2beta_execution_status_proto_msgTypes[4].OneofWrappers = []any{}
	file_sui_rpc_v2beta_execution_status_proto_msgTypes[5].OneofWrappers = []any{}
	file_sui_rpc_v2beta_execution_status_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sui_rpc_v2beta_execution_status_proto_rawDesc), len(file_sui_rpc_v2beta_execution_status_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sui_rpc_v2beta_execution_status_proto_goTypes,
		DependencyIndexes: file_sui_rpc_v2beta_execution_status_proto_depIdxs,
		EnumInfos:         file_sui_rpc_v2beta_execution_status_proto_enumTypes,
		MessageInfos:      file_sui_rpc_v2beta_execution_status_proto_msgTypes,
	}.Build()
	File_sui_rpc_v2beta_execution_status_proto = out.File
	file_sui_rpc_v2beta_execution_status_proto_goTypes = nil
	file_sui_rpc_v2beta_execution_status_proto_depIdxs = nil
}
