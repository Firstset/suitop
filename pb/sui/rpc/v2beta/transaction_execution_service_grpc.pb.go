// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sui/rpc/v2beta/transaction_execution_service.proto

package v2beta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionExecutionService_ExecuteTransaction_FullMethodName = "/sui.rpc.v2beta.TransactionExecutionService/ExecuteTransaction"
)

// TransactionExecutionServiceClient is the client API for TransactionExecutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionExecutionServiceClient interface {
	ExecuteTransaction(ctx context.Context, in *ExecuteTransactionRequest, opts ...grpc.CallOption) (*ExecuteTransactionResponse, error)
}

type transactionExecutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionExecutionServiceClient(cc grpc.ClientConnInterface) TransactionExecutionServiceClient {
	return &transactionExecutionServiceClient{cc}
}

func (c *transactionExecutionServiceClient) ExecuteTransaction(ctx context.Context, in *ExecuteTransactionRequest, opts ...grpc.CallOption) (*ExecuteTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionExecutionService_ExecuteTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionExecutionServiceServer is the server API for TransactionExecutionService service.
// All implementations must embed UnimplementedTransactionExecutionServiceServer
// for forward compatibility.
type TransactionExecutionServiceServer interface {
	ExecuteTransaction(context.Context, *ExecuteTransactionRequest) (*ExecuteTransactionResponse, error)
	mustEmbedUnimplementedTransactionExecutionServiceServer()
}

// UnimplementedTransactionExecutionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionExecutionServiceServer struct{}

func (UnimplementedTransactionExecutionServiceServer) ExecuteTransaction(context.Context, *ExecuteTransactionRequest) (*ExecuteTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTransaction not implemented")
}
func (UnimplementedTransactionExecutionServiceServer) mustEmbedUnimplementedTransactionExecutionServiceServer() {
}
func (UnimplementedTransactionExecutionServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionExecutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionExecutionServiceServer will
// result in compilation errors.
type UnsafeTransactionExecutionServiceServer interface {
	mustEmbedUnimplementedTransactionExecutionServiceServer()
}

func RegisterTransactionExecutionServiceServer(s grpc.ServiceRegistrar, srv TransactionExecutionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionExecutionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionExecutionService_ServiceDesc, srv)
}

func _TransactionExecutionService_ExecuteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionExecutionServiceServer).ExecuteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionExecutionService_ExecuteTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionExecutionServiceServer).ExecuteTransaction(ctx, req.(*ExecuteTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionExecutionService_ServiceDesc is the grpc.ServiceDesc for TransactionExecutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionExecutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sui.rpc.v2beta.TransactionExecutionService",
	HandlerType: (*TransactionExecutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTransaction",
			Handler:    _TransactionExecutionService_ExecuteTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sui/rpc/v2beta/transaction_execution_service.proto",
}
