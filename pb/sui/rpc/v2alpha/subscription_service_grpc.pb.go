// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sui/rpc/v2alpha/subscription_service.proto

package v2alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubscriptionService_SubscribeCheckpoints_FullMethodName = "/sui.rpc.v2alpha.SubscriptionService/SubscribeCheckpoints"
)

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	// Subscribe to the stream of checkpoints.
	//
	// This API provides a subscription to the checkpoint stream for the Sui
	// blockchain. When a subscription is initialized the stream will begin with
	// the latest executed checkpoint as seen by the server. Responses are
	// gaurenteed to return checkpoints in-order and without gaps. This enables
	// clients to know exactly the last checkpoint they have processed and in the
	// event the subscription terminates (either by the client/server or by the
	// connection breaking), clients will be able to reinitailize a subscription
	// and then leverage other APIs in order to request data for the checkpoints
	// they missed.
	SubscribeCheckpoints(ctx context.Context, in *SubscribeCheckpointsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeCheckpointsResponse], error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) SubscribeCheckpoints(ctx context.Context, in *SubscribeCheckpointsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeCheckpointsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[0], SubscriptionService_SubscribeCheckpoints_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeCheckpointsRequest, SubscribeCheckpointsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SubscriptionService_SubscribeCheckpointsClient = grpc.ServerStreamingClient[SubscribeCheckpointsResponse]

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility.
type SubscriptionServiceServer interface {
	// Subscribe to the stream of checkpoints.
	//
	// This API provides a subscription to the checkpoint stream for the Sui
	// blockchain. When a subscription is initialized the stream will begin with
	// the latest executed checkpoint as seen by the server. Responses are
	// gaurenteed to return checkpoints in-order and without gaps. This enables
	// clients to know exactly the last checkpoint they have processed and in the
	// event the subscription terminates (either by the client/server or by the
	// connection breaking), clients will be able to reinitailize a subscription
	// and then leverage other APIs in order to request data for the checkpoints
	// they missed.
	SubscribeCheckpoints(*SubscribeCheckpointsRequest, grpc.ServerStreamingServer[SubscribeCheckpointsResponse]) error
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriptionServiceServer struct{}

func (UnimplementedSubscriptionServiceServer) SubscribeCheckpoints(*SubscribeCheckpointsRequest, grpc.ServerStreamingServer[SubscribeCheckpointsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCheckpoints not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}
func (UnimplementedSubscriptionServiceServer) testEmbeddedByValue()                             {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubscriptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_SubscribeCheckpoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCheckpointsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SubscribeCheckpoints(m, &grpc.GenericServerStream[SubscribeCheckpointsRequest, SubscribeCheckpointsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SubscriptionService_SubscribeCheckpointsServer = grpc.ServerStreamingServer[SubscribeCheckpointsResponse]

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sui.rpc.v2alpha.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeCheckpoints",
			Handler:       _SubscriptionService_SubscribeCheckpoints_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sui/rpc/v2alpha/subscription_service.proto",
}
