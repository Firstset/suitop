// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sui/rpc/v2alpha/live_data_service.proto

package v2alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LiveDataService_ListDynamicFields_FullMethodName   = "/sui.rpc.v2alpha.LiveDataService/ListDynamicFields"
	LiveDataService_ListOwnedObjects_FullMethodName    = "/sui.rpc.v2alpha.LiveDataService/ListOwnedObjects"
	LiveDataService_GetCoinInfo_FullMethodName         = "/sui.rpc.v2alpha.LiveDataService/GetCoinInfo"
	LiveDataService_SimulateTransaction_FullMethodName = "/sui.rpc.v2alpha.LiveDataService/SimulateTransaction"
	LiveDataService_ResolveTransaction_FullMethodName  = "/sui.rpc.v2alpha.LiveDataService/ResolveTransaction"
)

// LiveDataServiceClient is the client API for LiveDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveDataServiceClient interface {
	ListDynamicFields(ctx context.Context, in *ListDynamicFieldsRequest, opts ...grpc.CallOption) (*ListDynamicFieldsResponse, error)
	ListOwnedObjects(ctx context.Context, in *ListOwnedObjectsRequest, opts ...grpc.CallOption) (*ListOwnedObjectsResponse, error)
	GetCoinInfo(ctx context.Context, in *GetCoinInfoRequest, opts ...grpc.CallOption) (*GetCoinInfoResponse, error)
	SimulateTransaction(ctx context.Context, in *SimulateTransactionRequest, opts ...grpc.CallOption) (*SimulateTransactionResponse, error)
	ResolveTransaction(ctx context.Context, in *ResolveTransactionRequest, opts ...grpc.CallOption) (*ResolveTransactionResponse, error)
}

type liveDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveDataServiceClient(cc grpc.ClientConnInterface) LiveDataServiceClient {
	return &liveDataServiceClient{cc}
}

func (c *liveDataServiceClient) ListDynamicFields(ctx context.Context, in *ListDynamicFieldsRequest, opts ...grpc.CallOption) (*ListDynamicFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDynamicFieldsResponse)
	err := c.cc.Invoke(ctx, LiveDataService_ListDynamicFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveDataServiceClient) ListOwnedObjects(ctx context.Context, in *ListOwnedObjectsRequest, opts ...grpc.CallOption) (*ListOwnedObjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOwnedObjectsResponse)
	err := c.cc.Invoke(ctx, LiveDataService_ListOwnedObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveDataServiceClient) GetCoinInfo(ctx context.Context, in *GetCoinInfoRequest, opts ...grpc.CallOption) (*GetCoinInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoinInfoResponse)
	err := c.cc.Invoke(ctx, LiveDataService_GetCoinInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveDataServiceClient) SimulateTransaction(ctx context.Context, in *SimulateTransactionRequest, opts ...grpc.CallOption) (*SimulateTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimulateTransactionResponse)
	err := c.cc.Invoke(ctx, LiveDataService_SimulateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveDataServiceClient) ResolveTransaction(ctx context.Context, in *ResolveTransactionRequest, opts ...grpc.CallOption) (*ResolveTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveTransactionResponse)
	err := c.cc.Invoke(ctx, LiveDataService_ResolveTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveDataServiceServer is the server API for LiveDataService service.
// All implementations must embed UnimplementedLiveDataServiceServer
// for forward compatibility.
type LiveDataServiceServer interface {
	ListDynamicFields(context.Context, *ListDynamicFieldsRequest) (*ListDynamicFieldsResponse, error)
	ListOwnedObjects(context.Context, *ListOwnedObjectsRequest) (*ListOwnedObjectsResponse, error)
	GetCoinInfo(context.Context, *GetCoinInfoRequest) (*GetCoinInfoResponse, error)
	SimulateTransaction(context.Context, *SimulateTransactionRequest) (*SimulateTransactionResponse, error)
	ResolveTransaction(context.Context, *ResolveTransactionRequest) (*ResolveTransactionResponse, error)
	mustEmbedUnimplementedLiveDataServiceServer()
}

// UnimplementedLiveDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLiveDataServiceServer struct{}

func (UnimplementedLiveDataServiceServer) ListDynamicFields(context.Context, *ListDynamicFieldsRequest) (*ListDynamicFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDynamicFields not implemented")
}
func (UnimplementedLiveDataServiceServer) ListOwnedObjects(context.Context, *ListOwnedObjectsRequest) (*ListOwnedObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwnedObjects not implemented")
}
func (UnimplementedLiveDataServiceServer) GetCoinInfo(context.Context, *GetCoinInfoRequest) (*GetCoinInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinInfo not implemented")
}
func (UnimplementedLiveDataServiceServer) SimulateTransaction(context.Context, *SimulateTransactionRequest) (*SimulateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateTransaction not implemented")
}
func (UnimplementedLiveDataServiceServer) ResolveTransaction(context.Context, *ResolveTransactionRequest) (*ResolveTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveTransaction not implemented")
}
func (UnimplementedLiveDataServiceServer) mustEmbedUnimplementedLiveDataServiceServer() {}
func (UnimplementedLiveDataServiceServer) testEmbeddedByValue()                         {}

// UnsafeLiveDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveDataServiceServer will
// result in compilation errors.
type UnsafeLiveDataServiceServer interface {
	mustEmbedUnimplementedLiveDataServiceServer()
}

func RegisterLiveDataServiceServer(s grpc.ServiceRegistrar, srv LiveDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedLiveDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LiveDataService_ServiceDesc, srv)
}

func _LiveDataService_ListDynamicFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDynamicFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveDataServiceServer).ListDynamicFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveDataService_ListDynamicFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveDataServiceServer).ListDynamicFields(ctx, req.(*ListDynamicFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveDataService_ListOwnedObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOwnedObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveDataServiceServer).ListOwnedObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveDataService_ListOwnedObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveDataServiceServer).ListOwnedObjects(ctx, req.(*ListOwnedObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveDataService_GetCoinInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveDataServiceServer).GetCoinInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveDataService_GetCoinInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveDataServiceServer).GetCoinInfo(ctx, req.(*GetCoinInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveDataService_SimulateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveDataServiceServer).SimulateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveDataService_SimulateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveDataServiceServer).SimulateTransaction(ctx, req.(*SimulateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveDataService_ResolveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveDataServiceServer).ResolveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveDataService_ResolveTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveDataServiceServer).ResolveTransaction(ctx, req.(*ResolveTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveDataService_ServiceDesc is the grpc.ServiceDesc for LiveDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sui.rpc.v2alpha.LiveDataService",
	HandlerType: (*LiveDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDynamicFields",
			Handler:    _LiveDataService_ListDynamicFields_Handler,
		},
		{
			MethodName: "ListOwnedObjects",
			Handler:    _LiveDataService_ListOwnedObjects_Handler,
		},
		{
			MethodName: "GetCoinInfo",
			Handler:    _LiveDataService_GetCoinInfo_Handler,
		},
		{
			MethodName: "SimulateTransaction",
			Handler:    _LiveDataService_SimulateTransaction_Handler,
		},
		{
			MethodName: "ResolveTransaction",
			Handler:    _LiveDataService_ResolveTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sui/rpc/v2alpha/live_data_service.proto",
}
